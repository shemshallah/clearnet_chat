# Clearnet Chat - Production Deployment

## 🚀 Single-File Production-Grade Backend

This is a consolidated, production-ready FastAPI backend for the Clearnet Chat quantum foam messaging system.

### 📁 Files (Minimum Required):

1. **main.py** - Complete backend application (all-in-one)
2. **requirements.txt** - Python dependencies
3. **render.yaml** (optional) - Automatic Render deployment config

### 🔧 Features Included:

- ✅ User authentication (JWT tokens)
- ✅ WebSocket real-time chat
- ✅ Email/messaging system
- ✅ Contact management
- ✅ Quantum collider encryption
- ✅ PostgreSQL support (production)
- ✅ SQLite support (development)
- ✅ CORS configured for clearnet_gate
- ✅ Health check endpoints
- ✅ Connection pooling
- ✅ Error handling
- ✅ Database migrations on startup

### 🌐 Render Deployment:

#### Option 1: Blueprint Deploy (Recommended)
1. Push these files to your GitHub repo
2. In Render Dashboard: New > Blueprint
3. Connect your repo
4. Render will auto-detect `render.yaml` and create:
   - Web Service: clearnet-chat
   - PostgreSQL Database: clearnet-chat-db

#### Option 2: Manual Deploy
1. Go to Render Dashboard
2. New > Web Service
3. Connect your GitHub repo
4. Settings:
   - **Name**: clearnet-chat
   - **Environment**: Python 3
   - **Build Command**: `pip install -r requirements.txt`
   - **Start Command**: `uvicorn main:app --host 0.0.0.0 --port $PORT`
5. Add Environment Variables:
   - `SECRET_KEY`: (generate random string)
   - `DATABASE_URL`: (from PostgreSQL database)
   - `CLEARNET_GATE_URL`: https://clearnet-gate.onrender.com

### 🗄️ Database Setup:

#### For PostgreSQL (Production):
1. Create PostgreSQL database in Render
2. Copy "Internal Database URL"
3. Set as `DATABASE_URL` environment variable
4. Database tables auto-create on first run

#### For SQLite (Development/Testing):
- No setup needed
- Auto-creates `holo_db.db` file
- Not recommended for production (ephemeral filesystem)

### 🔐 Environment Variables:

Required:
```
SECRET_KEY=your-secret-key-here
DATABASE_URL=postgresql://user:pass@host/db
CLEARNET_GATE_URL=https://clearnet-gate.onrender.com
```

Optional:
```
PORT=8000 (auto-set by Render)
```

### 🧪 Local Testing:

```bash
# Install dependencies
pip install -r requirements.txt

# Run locally
python main.py

# Or with uvicorn
uvicorn main:app --reload
```

Access at: http://localhost:8000

### 📡 API Endpoints:

- `GET /` - Service info
- `GET /health` - Health check
- `POST /api/register` - User registration
- `POST /api/login` - User login
- `POST /api/forget-password` - Password reset
- `WS /ws/chat?token=xxx` - WebSocket chat
- `GET /api/inbox` - Get emails
- `POST /api/inbox/send` - Send email
- `DELETE /api/inbox/{id}` - Delete email
- `GET /api/contacts` - Get contacts
- `POST /api/contacts` - Add contact
- `POST /api/contacts/import` - Bulk import

### 🔄 Integration with clearnet_gate:

The gateway (clearnet_gate) should proxy to this service:
```
clearnet_gate.onrender.com/chat/* -> clearnet-chat.onrender.com/*
```

Configure CORS to allow the gateway URL.

### 🛡️ Security Features:

- Argon2 password hashing
- JWT token authentication
- Fernet encryption for messages
- Black hole hash cryptography
- SQL injection protection (ORM)
- CORS protection
- Rate limiting ready (add middleware)

### 📊 Database Schema:

- **users**: User accounts and profiles
- **messages**: Real-time chat messages
- **emails**: Email-style messages
- **contacts**: User contact lists

All encrypted content uses quantum collider encryption.

### 🚨 Production Checklist:

- [ ] Change SECRET_KEY (use strong random value)
- [ ] Set up PostgreSQL database
- [ ] Configure CLEARNET_GATE_URL correctly
- [ ] Enable HTTPS (automatic on Render)
- [ ] Monitor logs for errors
- [ ] Set up database backups
- [ ] Configure scaling if needed

### 📈 Monitoring:

Check service health:
```
curl https://clearnet-chat.onrender.com/health
```

### 🔧 Troubleshooting:

**Issue**: Database connection failed
- Check DATABASE_URL format
- Verify PostgreSQL is running
- Check internal vs external URL

**Issue**: WebSocket not connecting
- Verify token is passed correctly
- Check CORS settings
- Ensure WSS protocol for HTTPS

**Issue**: Import errors
- Run: `pip install -r requirements.txt --upgrade`
- Check Python version (3.11+)

### 📝 Notes:

- All database tables auto-create on startup
- Free tier Render may sleep after inactivity
- Database persists between restarts
- WebSocket connections limited by plan
- Consider upgrading for production load

### 🎯 Next Steps:

After deployment, you'll need:
1. Frontend (React/Vue) to connect to this API
2. Update clearnet_gate to proxy requests
3. Test all endpoints
4. Monitor performance
